/** Mixins to add to BootStrap (4). Assumes "_variables.scss' is in the GULP path */
/*
//Optional Google Fonts
<link href="https://fonts.googleapis.com/css?family=Montserrat:400,700|Open+Sans:400,700|Oswald:400,700|Lato:400,700"
          rel="stylesheet">
font-family: 'Montserrat', sans-serif;
font-family: 'Open Sans', verdana;
font-family: 'Oswald', verdana;
font-family: 'Lato', verdana;
*/

@import 'variables';
// If they weren't previously defined, use defaults
$grid-breakpoints: (xs: 0, sm: 544px, md: 768px, lg: 992px, xl: 1200px) !default;
$grid-columns:               12 !default;
$grid-gutter-width:          1.875rem !default; // 30px

//First three are to define classes at breakpoints - above, below, and between

@function breakpoint($sz) {
  @if type-of($sz) == string {
    $sz: map-get($grid-breakpoints, $sz)
  }
  @if type-of($sz) != 'number' {
    @debug ('Result of sz:', $sz);
    @error 'Bad parameter sz:';
  }
  @return $sz;
}

// Can take a BS 'sz' ('xs', 'sm', etc)
@mixin above-bp($sz) {
  $breakpoint: breakpoint($sz);
  @media (min-width: $breakpoint) {
    @content
  }
}
@mixin below-bp($sz) {
  $breakpoint: breakpoint($sz);
  @media (max-width: $breakpoint - 1px) {
    @content
  }
}

@mixin between-bps($min, $max) {
  $min-breakpoint: breakpoint($min);
  $max-breakpoint:  breakpoint($max);
  @media ( min-width: $min-breakpoint ) and (max-width: $max-breakpoint - 1px) {
    @content
  }
}

@mixin mx-text-format($sz:medium, $weight:400, $color:black) {}


@mixin absolutecenter($axis: "both"){
  position:absolute;
  @if $axis == "y"{
    margin-top: 0;
    margin-bottom: 0;
    top: 50%;
    transform: translateY(-50%);
  }
  @if $axis == "x"{
    margin-left: 0;
    margin-right: 0;
    left: 50%;
    transform: translateX(-50%);
  }
  @if $axis == "both"{
    margin: 0;
    top:50%;
    left:50%;
    transform: translate(-50%,-50%);
  }
}

//In SCSS, '' & 0 are true
@function empty($value) {
  @if not($value) 
      or $value == "" 
      or $value == 0
      or $value == ()
      or length($value) == 0 {
    @return true;
  }
  @return false;
}
// Builds a declaration block from mapped property/values

@mixin mk-decblock($map:()) {
  $keys: map-keys($map);
  @each $key in $keys {
    #{$key}: map-get($map,$key);
  }
}
@mixin mk-classdef($cname,$maplist) {
  .#{$cname} {
    @each $map in $maplist {
      @include mk-decblock($map);
    }
  }
}
@mixin mk-decblock($map:()) {
  $keys: map-keys($map);
  @each $key in $keys {
    @if not(empty($key) or empty(map-get($map,$key))) {
      #{$key}: map-get($map,$key);
    }
  }
}
@function empty($value) {
  @if not($value) 
      or $value == "" 
      or $value == 0
      or $value == ()
      or length($value) == 0 {
    @return true;
  }
  @return false;
}

.test-map {
  $map:();
  $map: map-merge($map,(background:blue));
  $map: map-merge($map,(border:solid black 3px));
  @include mk-decblock($map);
}

@mixin make-bg($cname: mhead, $color: #da8) {
  .#{$cname}-a { background-color: lighten($color,20%); }
  .#{$cname}-b { background-color: darken($color,20%); }
}

/** Makes (multiple) text format classes, based on $args map:
 * All class names prepended by 'au-'
 * Params:
 * cname: format - class name(s) will be au-cname
 * weight: null - font-weight
 * font: null - font-family
 * szrange: 0 or int - how many class sizes
 * crange: null or true - generate lighter & darker fonts?
 * bgrange: null or 1 - generate light & dark bg? (Prefer: Use wrapper)
 * background: null - or color (Prefer: Use wrapper for BG)
 * margin: null - or margin (Prefer: Use wrapper)
 * padding: null or padding (Prefer: Use wrapper)
 * align: null - or center or left or right (Prefer: Use wrapper)
 * color: null or color
 * border: null or color
 * 
*/


@mixin mk-format($args:()) {
  $defaults: (cname:format,szrange:0, size:1em);
  $params: map-merge($defaults,$args);
  $cname: map-get($params,cname);
  $bname: au-#{$cname};
  $border: map-get($params,border);
  $szrange: map-get($params,szrange);
  $crange: map-get($params,crange);
  $bgrange: map-get($params,bgrange);
  $background: map-get($params,background);
  $color: map-get($params,color);
  $weight: map-get($params,weight);
  $display: map-get($params,display);
  $align: map-get($params,align);
  $font: map-get($params,font);
  $size: map-get($params,size);
  $textshadow: map-get($params,textshadow);
  $boxshadow: map-get($params,boxshadow);
  
  $map:();
  @if $border {
    $map: map-merge($map, (border: solid $border 1px,
      border-radius: .5em));
  }
  $map:map-merge($map,(display:$display,
      text-align:$align,
      font-family:$font));

  $clmap: if($color and $crange, 
        ('-flt':(color:lighten($color,20%)),
          '':(),
          '-fdk':(color:darken($color,20%))),
          ('':(color:$color)));


  $bgmap: if($background and $bgrange, 
        ('-bglt':(background:lighten($color,20%)),
          '':(background:$background),
          '-bgdk':(background:darken($background,20%))),
          ('':(background:$background)));

  @for $i from 0 through $szrange {
    $sz: if($i!=0, $i, null);
    $szmap: (font-size:($i/5)+$size);
    @each $bga in map-keys($bgmap) {
      $bmap: map-get($bgmap,$bga);
      @each $ca in map-keys($clmap) {
        $cmap: map-get($clmap,$ca);
        @debug #{$bname}#{$ca}#{$bga}#{$sz};
        .#{$bname}#{$ca}#{$bga}#{$sz} {
          @include mk-decblock($map);
          @include mk-decblock($cmap);
          @include mk-decblock($bmap);
          @include mk-decblock($szmap);
          @include mk-boxshadow($boxshadow);
          @include mk-textshadow($textshadow);
        }
      }
    }
  }
}

@mixin mk-boxshadow($map:()) {
  @if not(empty($map)) {
    @if $map == true {
      box-shadow: 1rem 1rem 3rem -1rem rgba(0,0,0,.5);
    }
  }
}
@mixin mk-textshadow ($map:()) {
  @if not(empty($map)) {
    @if $map == true {
      text-shadow: .1rem .1rem .3rem  rgba(0,0,0,.5);
    }
  }

}
//Example Classname: .au-head-flt-bgdk2 
//
/*
@include mk-format((cname:head,
    szrange:3,
     color:#456,crange:1,
     background:#cde,
     bgrange:1,
     border: #aaf,
     display: inline,
     ));
*/

@mixin h-padding($sz) {
  padding-left: $sz;
  padding-right: $sz;
}

@mixin v-padding($sz) {
  padding-top: $sz;
  padding-bottom: $sz;
}

@mixin v-margin($sz) {
  margin-top: $sz;
  margin-bottom: $sz;
}

@mixin h-margin($sz: auto) {
  margin-left: $sz;
  margin-right: $sz;
}

/** Makes text/section wrappers, with MAP args/defaults:
 * boxshadow: default for the mk-boxshadow mixin
 * border: the border color, or false
 * background: the background color, or false
 * align: text alignment of the contained text - left, right, center
 * v-padding: 1em
 * h-padding: null
 * v-margin: 1em
 * h-margin: null
 * border-radius: null
 * margin: null, if present, overrides v & h margin
 * padding: null, if present, overrides v & h padding
 */

@mixin mk-wrapper($args:()) {
  $defaults: (
    boxshadow:true,
    border:#aaa,
    background:rgba(230,240,250,.3),
    v-padding: 1em,
    v-margin: 1em,
    border-radius: 5px,
    );
  $params: map-merge($defaults,$args);

  $align: map-get($params,align);
  $boxshadow: map-get($params,boxshadow);
  $border: map-get($params,border);
  $border-radius: map-get($params,border-radius);
  $background: map-get($params,background);
  $padding: map-get($params,padding);
  $margin: map-get($params,margin);
  $h-padding: map-get($params,h-padding);
  $h-margin: map-get($params,h-margin);
  $v-padding: map-get($params,v-padding);
  $v-margin: map-get($params,v-margin);

  @if $border {
    border: solid $border 1px;
    border-radius: $border-radius;
  }
  @if $align {
    text-align: $align;
  }
  @if $background {
    background: $background;
  }
  @if $boxshadow {
    @include mk-boxshadow($boxshadow);
  }
  @if $padding {
    padding: $padding;
  } @else {
    @if $h-padding {
      @include h-padding($h-padding);
    }
    @if $v-padding {
      @include v-padding($v-padding);
    }
  }
  @if $margin {
    margin: $margin;
  } @else {
    @if $h-margin {
      @include h-margin($h-margin);
    }
    @if $v-margin {
      @include v-margin($v-margin);
    }
  }
}

/** Uses mk-wrapper, above, with different defaults */
@mixin mk-section($args:()) {
  $defaults: (
    border: #aaf,
    margin: 5px,
    padding: 5px,
    background:  rgba(255,255,255,.2),
    border-radius: 5px,
    );
  $params: map-merge($defaults,$args);
  @include mk-wrapper($params);
}
@mixin mk-section-nomargin($args:()) {
  $defaults: (
    margin: 0,
  );
  $params: map-merge($defaults,$args);
  @include mk-section($params);
}

.section {
  @include mk-section;
}

.section-nomargin {
  @include mk-section-nomargin;
}

@mixin text-align($align:center) {
  text-align: $align;
}

.left-align {
  @include text-align(left);
}
.right-align {
  @include text-align(right);
}
.center-align {
  @include text-align(center);
}